package view;

import java.awt.Point;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.Icon;
import javax.swing.ImageIcon;

import javax.swing.JLabel;

import model.GameEngineCallbackImpl2;
import model.GameEngineImpl;
import model.SimplePlayer;
import model.interfaces.GameEngine;
import model.interfaces.Player;
import model.interfaces.PlayingCard;

/**
 * GameEngineCallback implementation for SADI assignment 1, Semester 2, 2015
 * @author junhui.hou
 */
public class GuiClient extends javax.swing.JFrame {
	
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	/**
     * Creates new form GuiClient
     */
    public GuiClient() {
        initComponents();
        setLocationRelativeTo(null); //center this window on screen
        theHouse = new BJHouse("House");
        players = new ArrayList<>();
        gameEngine = new GameEngineImpl();
	gameEngine.addGameEngineCallback(new GameEngineCallbackImpl2(this));
        new Thread(new Dealer()).start();
    }
    class Dealer implements Runnable{
        @Override
        public void run() {
            while(true){
                synchronized(ALock){
                    try {
                        ALock.wait();  // waiting for Deal command
                    } catch (InterruptedException ex) {
                        Logger.getLogger(GuiClient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                // Deal start ...
                dealInit();
		for (BJPlayer p : players)
		{
                    //gameEngine.addPlayer(p.player);
                    gameEngine.dealPlayer(p.player, 600);
		}
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(GuiClient.class.getName()).log(Level.SEVERE, null, ex);
                }
		gameEngine.calculateResult();
                dealPost();
            }
        }        
    }   
    private void dealPost(){
    
        showPoints();
        dealMenu.setEnabled(true);
        dealBtn.setEnabled(true);
        if(players != null && players.size()< MAX_PLAYER_NUM){
            addMenu.setEnabled(true);
            addBtn.setEnabled(true);        
        }
    }
    private void dealInit(){
        uiCompInit(true);
        ((GameEngineImpl)gameEngine).shuffleCards();
         dealMenu.setEnabled(false);
         dealBtn.setEnabled(false);
         addMenu.setEnabled(false);
         addBtn.setEnabled(false);
    }
    public void showCard(Player player, PlayingCard card, boolean busted){
        if(player != null){ //show player1 card
            for(BJPlayer p: players){
                if(p.player == player){
                    String fn = "images/" + card.getSuit().name()+card.getValue().name()+".jpg";
                    Icon icon = new ImageIcon(getClass().getResource(fn));
                    p.cardLB[((GameEngineImpl)gameEngine).getCardNo()].setIcon(icon);
                    break;
                }
            }
        }else{ //show house card
            String fn = "images/" + card.getSuit().name()+card.getValue().name()+".jpg";
            Icon icon = new ImageIcon(getClass().getResource(fn));
            theHouse.cardLB[((GameEngineImpl)gameEngine).getCardNo()].setIcon(icon);
        }
    } 
    public void showResult(Player player, int r){
        if(player != null){
            for(BJPlayer p: players){
                if(p.player == player){
                    p.scoreLB.setText("Score: "+r);
                    break;
                }
            }
        }
        else
            theHouse.scoreLB.setText("Score: "+r);
    }
    public void showPoints(){
        for(BJPlayer p: players){
            // give some points if one doesn't have enough
            if(p.player.getPoints() < p.player.getBet())
                p.player.setPoints(p.player.getBet()*10);
            p.pointsLB.setText("Points: "+p.player.getPoints());
        }
    }
    public void addPlayer(String name, int pt, int b){
       Player p = new SimplePlayer(id+"",name, pt);
       p.placeBet(b);
       players.add(new BJPlayer(p));
       gameEngine.addPlayer(p);
       id++;
       calcPosition();
       uiCompInit(true);
       dealMenu.setEnabled(true);
       dealBtn.setEnabled(true);
        if(players.size()>= MAX_PLAYER_NUM){
            addMenu.setEnabled(false);
            addBtn.setEnabled(false);        
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        addBtn = new javax.swing.JButton();
        dealBtn = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        addMenu = new javax.swing.JMenuItem();
        dealMenu = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        
      
     

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Speed21");
        setPreferredSize(new java.awt.Dimension(1065, 650));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(1065, 556));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 482, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        addBtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        addBtn.setText("Add");
        addBtn.setFocusable(false);
        addBtn.setRequestFocusEnabled(false);
        addBtn.setRolloverEnabled(false);
        addBtn.setVerifyInputWhenFocusTarget(false);
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        dealBtn.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        dealBtn.setText("Deal");
        dealBtn.setEnabled(false);
        dealBtn.setFocusPainted(false);
        dealBtn.setFocusable(false);
        dealBtn.setRequestFocusEnabled(false);
        dealBtn.setRolloverEnabled(false);
        dealBtn.setVerifyInputWhenFocusTarget(false);
        dealBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dealBtnActionPerformed(evt);
            }
        });
        

        jButton3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jButton3.setText("Exit");
        jButton3.setFocusPainted(false);
        jButton3.setFocusable(false);
        jButton3.setRequestFocusEnabled(false);
        jButton3.setRolloverEnabled(false);
        jButton3.setVerifyInputWhenFocusTarget(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dealBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap(882, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(addBtn)
                .addComponent(dealBtn)
                .addComponent(jButton3))
        );

        jMenuBar1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jMenu1.setText("File");

        addMenu.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        addMenu.setText("Add a player ");
        addMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMenuActionPerformed(evt);
            }
        });
        jMenu1.add(addMenu);

        dealMenu.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        dealMenu.setText("New Deal");
        dealMenu.setEnabled(false);
        dealMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dealMenuActionPerformed(evt);
            }
        });
        jMenu1.add(dealMenu);
        jMenu1.add(jSeparator1);

        jMenuItem3.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1074, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 484, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void addMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMenuActionPerformed
        addplayer();
    }//GEN-LAST:event_addMenuActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        addplayer();
    }//GEN-LAST:event_addBtnActionPerformed

    private void dealMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dealMenuActionPerformed
        synchronized(ALock){
            ALock.notify();
        }
    }//GEN-LAST:event_dealMenuActionPerformed

    private void dealBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dealBtnActionPerformed
        synchronized(ALock){
           ALock.notify();
        }
    }//GEN-LAST:event_dealBtnActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
       if(theHouse != null){
            calcPosition();
            uiCompInit(false);
       }
    }//GEN-LAST:event_formComponentResized

    private void addplayer(){
        new AddPlayer(this, true).setVisible(true);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         *  
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuiClient().setVisible(true);
            }
        });
    }
    class BJHouse{
        Point namePos,scorePos,cardPos;
        JLabel nameLB,scoreLB;
        JLabel[] cardLB = new JLabel[MAX_CARD_NUM];
        Point[] cardPt = new Point[MAX_CARD_NUM];
        public BJHouse(String name){
            nameLB = new JLabel(name);
            scoreLB = new JLabel("Score: 0");
            cardLB[0] = new JLabel();
            
            namePos = new Point();
            scorePos = new Point();
            cardPos = new Point();
            jPanel1.add(scoreLB);
            jPanel1.add(nameLB);
            int i;
            for(i=0; i<MAX_CARD_NUM; i++){
                cardPt[i] = new Point();
                cardLB[i] = new JLabel();
                jPanel1.add(cardLB[i]);
                cardLB[i].setBounds(0,0,105,150);
            }
            for(i=0;i<MAX_CARD_NUM;i++){
                jPanel1.setComponentZOrder(cardLB[i], MAX_CARD_NUM-1-i);
            }            
        }
    }
    class BJPlayer {
        Player player;
        Point namePos,scorePos,pointsPos,cardPos;
        JLabel nameLB,scoreLB,pointsLB;
        JLabel[] cardLB = new JLabel[MAX_CARD_NUM];
        Point[] cardPt = new Point[MAX_CARD_NUM];
        
        public BJPlayer(Player p){
            player = p;
            nameLB = new JLabel(p.getPlayerName());
            scoreLB = new JLabel("Score: 0");
            pointsLB = new JLabel("Points: "+p.getPoints());
            namePos = new Point();
            scorePos = new Point();
            pointsPos = new Point();
            cardPos = new Point();
            jPanel1.add(nameLB);
            jPanel1.add(scoreLB);
            jPanel1.add(pointsLB);
            nameLB.setBounds(0,0,80,15);
            scoreLB.setBounds(0,0,60,15);
            pointsLB.setBounds(0,0,90,55);
            
            int i;
            //Icon icon = new ImageIcon(getClass().getResource("images/spadesKing.jpg"));
            for(i=0; i<MAX_CARD_NUM; i++){
                cardPt[i] = new Point();
                cardLB[i] = new JLabel();
                jPanel1.add(cardLB[i]);
                //cardLB[i].setIcon(icon);
                //cardLB[i].setBounds(0,0,icon.getIconWidth(),icon.getIconHeight());
                cardLB[i].setBounds(0,0,105,150);
            }
            for(i=0;i<MAX_CARD_NUM;i++){
                jPanel1.setComponentZOrder(cardLB[i], MAX_CARD_NUM-1-i);
            }
        }
    }
    void calcPosition(){
        int w = getWidth();
        int h = getHeight();
        theHouse.namePos.x = w/2 - 40;
        theHouse.namePos.y = 20;
        theHouse.scorePos.x = theHouse.namePos.x + 50; 
        theHouse.scorePos.y = theHouse.namePos.y; 
        theHouse.nameLB.setBounds(theHouse.namePos.x, theHouse.namePos.y, 42, 15);
        theHouse.scoreLB.setBounds(theHouse.scorePos.x,theHouse.scorePos.y,60,15);
        int x = theHouse.namePos.x - 60;
        int y = theHouse.namePos.y + 40;
        for(int i=0; i<MAX_CARD_NUM; i++){
            theHouse.cardPt[i].x = x + 19*i; 
            theHouse.cardPt[i].y = y;
            theHouse.cardLB[i].setLocation(theHouse.cardPt[i]);
        }
        
        int n = players.size();
        if(n==0) return;
        int xoffset = w/n/2-55;
        for(int i=0; i<n; i++){
            BJPlayer p = players.get(i);
            p.namePos.x = (w/n)*i+xoffset;
            p.namePos.y = h - 150;
            p.scorePos.x = p.namePos.x + 60; 
            p.scorePos.y = p.namePos.y - 10; 
            p.pointsPos.x = p.namePos.x + 60; 
            p.pointsPos.y = p.namePos.y + 10; 
            for(int j=0; j<MAX_CARD_NUM; j++){
                p.cardPt[j].x = p.namePos.x - 50 + 19*j; 
                p.cardPt[j].y = p.namePos.y - 190;
            }
        }
    }
    void uiCompInit(boolean removeCards){
        int i;
        theHouse.nameLB.setLocation(theHouse.namePos);
        theHouse.scoreLB.setLocation(theHouse.scorePos);
        theHouse.scoreLB.setText("Score: 0");
        if(removeCards){
           for(i=0;i<MAX_CARD_NUM;i++){
             theHouse.cardLB[i].setIcon(null);
           }
        }
        for(BJPlayer p: players){
            p.nameLB.setLocation(p.namePos);
            p.scoreLB.setLocation(p.scorePos);
            p.scoreLB.setText("Score: 0");
            p.pointsLB.setLocation(p.pointsPos);
            for(i=0;i<MAX_CARD_NUM;i++){
                if(removeCards)
                    p.cardLB[i].setIcon(null);
                p.cardLB[i].setLocation(p.cardPt[i]);
            }
        }
    }
    
    // Custom definitions
    private List<BJPlayer> players;
    private BJHouse theHouse;
    private static int id = 1;
    final GameEngine gameEngine;
    final String ALock = new String();
    final static int MAX_PLAYER_NUM = 4; 
    final static int MAX_CARD_NUM = 12; 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JMenuItem addMenu;
    private javax.swing.JButton dealBtn;
    private javax.swing.JMenuItem dealMenu;
    private javax.swing.JButton jButton3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
